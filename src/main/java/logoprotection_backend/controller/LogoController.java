package logoprotection_backend.controller;

import logoprotection_backend.service.LogoService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j; // ğŸ“Œ Eksik olan bu satÄ±rÄ± ekledik
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController // REST API controller olduÄŸunu belirtir
@RequestMapping("/api/logos") // API'nin ana yolu (endpoint baÅŸlangÄ±cÄ±)
@RequiredArgsConstructor // LogoService'in constructor injection'Ä±nÄ± saÄŸlar (final ile)
@Slf4j // ğŸ“Œ Loglama iÃ§in eklenmesi gereken anotasyon
public class LogoController {

    private final LogoService logoService;

    // KullanÄ±cÄ±dan logo yÃ¼klemek iÃ§in kullanÄ±lan endpoint
    // http://localhost:8080/api/logos/upload
    @PostMapping("/upload")
    public ResponseEntity<String> uploadLogo(@RequestParam("file") MultipartFile file) {
        log.info("Gelen dosya: {}", file.getOriginalFilename());

        if (file.isEmpty()) {
            log.error("Dosya boÅŸ geldi!");
            return ResponseEntity.badRequest().body("Dosya yÃ¼klenemedi! LÃ¼tfen geÃ§erli bir dosya seÃ§in.");
        }

        try {
            log.info("Dosya iÅŸleniyor...");
            String fileHash = logoService.uploadAndProtectLogo(file);
            log.info("Dosya baÅŸarÄ±yla iÅŸlendi. Hash: {}", fileHash);
            return ResponseEntity.ok("Logo baÅŸarÄ±yla koruma altÄ±na alÄ±ndÄ±. Hash: " + fileHash);
        } catch (Exception e) {
            log.error("Dosya iÅŸlenirken hata oluÅŸtu: ", e);
            return ResponseEntity.internalServerError().body("Dosya iÅŸlenirken hata oluÅŸtu: " + e.getMessage());
        }
    }


}
