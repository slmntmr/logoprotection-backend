package logoprotection_backend.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

@Service // Spring tarafÄ±ndan servis katmanÄ± olarak tanÄ±mlanÄ±r
@Slf4j // Loglama iÃ§in (log.info, log.error vb.)
public class LogoService {

    // ğŸ“Œ YÃ¼klenen logolarÄ±n saklanacaÄŸÄ± KESÄ°N dizin (GeÃ§ici deÄŸil, sabit klasÃ¶r)
    private static final String LOGO_DIR = System.getProperty("user.dir") + File.separator + "uploaded-logos";

    // KullanÄ±cÄ±nÄ±n yÃ¼klediÄŸi logoyu sunucuya kaydeder ve blockchain korumasÄ± saÄŸlar
    public String uploadAndProtectLogo(MultipartFile file) {
        try {
            // 1. Gelen logoyu sunucuya kaydet
            File storedFile = saveFile(file);

            // 2. Logonun SHA-256 hash'ini oluÅŸtur
            String fileHash = generateSHA256Hash(storedFile);

            // 3. Hash deÄŸerini blockchain'e gÃ¶ndererek zaman damgasÄ± oluÅŸtur
            sendHashToOpenTimestamps(hexStringToByteArray(fileHash));

            log.info("Logo baÅŸarÄ±yla koruma altÄ±na alÄ±ndÄ±, Hash: {}", fileHash);

            // 4. Hash deÄŸerini kullanÄ±cÄ±ya geri dÃ¶ndÃ¼r
            return fileHash;

        } catch (Exception e) {
            log.error("Dosya yÃ¼kleme veya koruma sÄ±rasÄ±nda hata oluÅŸtu: ", e);
            throw new RuntimeException("Dosya yÃ¼klenirken hata oluÅŸtu: " + e.getMessage());
        }
    }

    // --- YardÄ±mcÄ± Metotlar ---

    // MultipartFile dosyasÄ±nÄ± belirlenen dizine kaydeder
    private File saveFile(MultipartFile file) throws IOException {
        File directory = new File(LOGO_DIR);

        // ğŸ“Œ EÄŸer klasÃ¶r yoksa oluÅŸtur
        if (!directory.exists()) {
            boolean created = directory.mkdirs();
            if (!created) {
                throw new IOException("KlasÃ¶r oluÅŸturulamadÄ±: " + directory.getAbsolutePath());
            }
        }

        // ğŸ“Œ Dosya adÄ±nÄ± gÃ¼venli hale getir (boÅŸluklarÄ± ve Ã¶zel karakterleri kaldÄ±r)
        String safeFileName = file.getOriginalFilename()
                .replaceAll("[^a-zA-Z0-9\\.\\-]", "_"); // Ã–zel karakterleri "_" ile deÄŸiÅŸtir

        File destinationFile = new File(directory, safeFileName);
        file.transferTo(destinationFile);

        log.info("Dosya baÅŸarÄ±yla kaydedildi: {}", destinationFile.getAbsolutePath());

        return destinationFile;
    }

    // DosyanÄ±n SHA-256 hash deÄŸerini hesaplar
    private String generateSHA256Hash(File file) throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");

        // DosyanÄ±n tÃ¼m byte'larÄ±nÄ± oku
        byte[] fileBytes = Files.readAllBytes(file.toPath());

        log.info("SHA-256 hash hesaplanÄ±yor, dosya boyutu: {}", fileBytes.length);

        // Byte dizisini SHA-256 ile hash'le
        byte[] hashBytes = digest.digest(fileBytes);

        // Hash byte dizisini hexadecimal (16'lÄ±k) String'e Ã§evir
        StringBuilder hexString = new StringBuilder();
        for (byte b : hashBytes) {
            hexString.append(String.format("%02x", b));
        }

        log.info("SHA-256 hash baÅŸarÄ±yla oluÅŸturuldu: {}", hexString.toString());

        return hexString.toString();
    }

    // OluÅŸan hash deÄŸerini OpenTimestamps aracÄ±lÄ±ÄŸÄ±yla Blockchain'e gÃ¶nderir
    private void sendHashToOpenTimestamps(byte[] sha256Hash) {
        RestTemplate restTemplate = new RestTemplate();
        String otsUrl = "https://a.pool.opentimestamps.org/digest";

        try {
            log.info("Blockchain'e hash gÃ¶nderiliyor: {}", sha256Hash);

            // OpenTimestamps REST API Ã§aÄŸrÄ±sÄ±
            ResponseEntity<byte[]> response = restTemplate.postForEntity(
                    otsUrl,
                    sha256Hash,
                    byte[].class
            );

            log.info("OpenTimestamps yanÄ±t kodu: {}", response.getStatusCode());

            // BaÅŸarÄ±lÄ± yanÄ±t kontrolÃ¼
            if (response.getStatusCode() == HttpStatus.OK) {
                byte[] timestampProof = response.getBody();
                log.info("Blockchain Ã¼zerinde zaman damgasÄ± baÅŸarÄ±yla oluÅŸturuldu.");
            } else {
                log.error("OpenTimestamps baÅŸarÄ±sÄ±z oldu. Status: {}", response.getStatusCode());
                throw new RuntimeException("OpenTimestamps ile blockchain zaman damgasÄ± oluÅŸturma baÅŸarÄ±sÄ±z.");
            }

        } catch (Exception e) {
            log.error("Blockchain entegrasyonu sÄ±rasÄ±nda hata oluÅŸtu: {}", e.getMessage());
            throw new RuntimeException("Blockchain entegrasyonu sÄ±rasÄ±nda hata oluÅŸtu.");
        }
    }

    // Hexadecimal string'i byte dizisine Ã§eviren yardÄ±mcÄ± metot
    private byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i + 1), 16));
        }
        return data;
    }
}
